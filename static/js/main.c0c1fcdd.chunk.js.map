{"version":3,"sources":["firebase.js","GifDisplay.js","randomizer.js","SearchBar.js","Highlights.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","GifDisplay","moreGifs","event","index","console","log","target","dataset","keyword","chosenGif","axios","url","method","dataResponse","params","api_key","tag","then","result","funGif","data","newGifsArray","state","gifs","setState","handleSubmit","dbRef","database","ref","savedResult","movieTitle","props","push","errorMessage","gifpicks","prevProps","this","gifWords","getGif","keyword1","keyword2","keyword3","a","Promise","all","apiCall","gif1","gif2","gif3","s","keywordResults","length","undefined","q","limit","catch","className","map","items","key","id","onClick","src","images","fixed_width","data-keyword","alt","title","tabIndex","Component","randomIndex","array","Math","floor","random","randomThree","one","two","three","newArray","SearchBar","getMovie","preventDefault","toggleBackups","toggleGifDisplay","backupOptions","keywordSearch","responseType","moviedbAPI","query","userInput","page","res","results","match","filter","movie","popularity","movieSearch","words","keywords","name","approvedWords","e","test","newKeyWords","error","handleUserInput","value","backupSelection","chosenMovie","backup","targetId","parseInt","movieId","movieID","giphyAPI","onSubmit","action","htmlFor","onChange","type","placeholder","required","poster_path","gifTest","Highlights","removeSubmission","postRemoval","child","remove","savedResults","on","snapshot","val","newState","gif","gifObject","tabindex","App","to","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c0c1fcdd.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\n// using firebase for saving gifs and sorting them in a database\r\nconst firebaseConfig = {\r\n   apiKey: \"AIzaSyDHGxU6CsX_wSKhz928RUSBS8zVsXlzSHA\",\r\n   authDomain: \"out-of-context-movie-spoiler.firebaseapp.com\",\r\n   databaseURL: \"https://out-of-context-movie-spoiler.firebaseio.com\",\r\n   projectId: \"out-of-context-movie-spoiler\",\r\n   storageBucket: \"out-of-context-movie-spoiler.appspot.com\",\r\n   messagingSenderId: \"639841748908\",\r\n   appId: \"1:639841748908:web:aa131c98baa8dc1d4a1c09\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase\r\n","import React, { Component, Fragment } from 'react';\r\nimport axios from 'axios';\r\nimport firebase from './firebase.js'\r\n\r\n\r\nclass GifDisplay extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            gifs: [],\r\n            errorMessage: '',\r\n            gifpicks: []\r\n        }\r\n    }\r\n    //prevProp access to previous state in relation to this component\r\n    componentDidUpdate(prevProps) {\r\n        //checking if current gif words are same, then don't run function, only run if userInput\r\n        if (this.props.gifWords === prevProps.gifWords) return;\r\n        const getGif = async (keyword1, keyword2, keyword3) => {\r\n            const [gif1, gif2, gif3] = await Promise.all([apiCall(keyword1), apiCall(keyword2), apiCall(keyword3)])\r\n            const gifs = []\r\n            gifs.push(gif1.data.data, gif2.data.data, gif3.data.data)\r\n            this.setState({\r\n                gifs\r\n            })\r\n        }\r\n        console.log(this.props.gifWords);\r\n        const apiCall = (keyword) => {\r\n            return axios({\r\n                url: 'https://api.giphy.com/v1/gifs/translate',\r\n                method: 'GET',\r\n                dataResponse: 'json',\r\n                params: {\r\n                    api_key: 'NShPdQTfWnvbvgxLo7Jd7C5qDeFfrsLR',\r\n                    s: keyword\r\n                }\r\n            })\r\n        }\r\n        if (this.props.keywordResults.length === 1 || this.props.keywordResults.length === 2 || this.props.keywordResults === undefined || this.props.keywordResults.length === 0) {\r\n            console.log('not enough keywords, running with title')\r\n            const newGif = (keyword) => {\r\n                return axios({\r\n                    url: 'https://api.giphy.com/v1/gifs/search',\r\n                    method: 'GET',\r\n                    dataResponse: 'json',\r\n                    params: {\r\n                        api_key: 'NShPdQTfWnvbvgxLo7Jd7C5qDeFfrsLR',\r\n                        q: keyword,\r\n                        limit: 3\r\n                    }\r\n                })\r\n                    .then((result) => {\r\n                        console.log(result);\r\n                        this.setState({\r\n                            gifs: result.data.data\r\n                        })\r\n                    })\r\n            }\r\n            return newGif(this.props.movieTitle)\r\n        }\r\n        else {\r\n            console.log('random keywords running')\r\n            return getGif(...this.props.gifWords).catch(() => {\r\n                this.setState({\r\n                    errorMessage: 'I am so sorry, but no gifs for you right now. I am sick.'\r\n                })\r\n            });\r\n        }\r\n    \r\n    }\r\n    // Users can select any individual gif to generate a different one\r\n    moreGifs = (event, index) => {\r\n        console.log(event.target.dataset.keyword);\r\n\r\n        const chosenGif = event.target.dataset.keyword\r\n\r\n        axios({\r\n            url: 'https://api.giphy.com/v1/gifs/random',\r\n            method: 'GET',\r\n            dataResponse: 'json',\r\n            params: {\r\n                api_key: 'NShPdQTfWnvbvgxLo7Jd7C5qDeFfrsLR',\r\n                tag: chosenGif\r\n            }\r\n        }).then((result) => {\r\n            const funGif = result.data.data\r\n            const newGifsArray = [...this.state.gifs]\r\n            newGifsArray[index] = funGif\r\n\r\n            this.setState({\r\n                gifs: newGifsArray\r\n            })\r\n         });\r\n      }\r\n\r\n    //created a submit button where users can save the gifs from the result page \r\n      handleSubmit = () => {\r\n          const dbRef = firebase.database().ref('savedResults');\r\n          const savedResult = {\r\n              movieTitle: this.props.movieTitle,\r\n              gifs: this.state.gifs\r\n            }\r\n            dbRef.push(savedResult);\r\n        }\r\n    render() {\r\n        // displaying user search result onto the page\r\n        return (\r\n            <Fragment>\r\n                <div className=\"wrapper gif-display\">\r\n                    <h2>{this.props.movieTitle}</h2>\r\n                    <div className=\"gif-box\">\r\n                        {this.state.gifs.map((items, index) => {\r\n                            return (\r\n                                <div className=\"gif-container\" key={items.id}>\r\n                                    <img onClick={(event) => this.moreGifs(event, index)} src={items.images.fixed_width.url} data-keyword={this.props.gifWords[index]} alt={`Gif title: ${items.title}. Provided by Giphy`} tabIndex=\"0\"/>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                        {this.state.errorMessage === '' ? null : <p>{this.state.errorMessage}</p>}\r\n                    </div>\r\n                <button className=\"save-button\" onClick={this.handleSubmit}>Save to My Gifs</button>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GifDisplay;","const randomIndex = (array) => {\r\n   const index = Math.floor(Math.random() * array.length);\r\n   return array[index]\r\n}\r\n\r\n//geting 3 random keywords for the movieApi \r\nconst randomThree = (array) => {\r\n   let one = randomIndex(array);\r\n   let two = randomIndex(array);\r\n   let three = randomIndex(array);\r\n   if (one === two || one === three) { one = randomIndex(array) }\r\n   if (two === one || two === three) { two = randomIndex(array) }\r\n   if (three === two || three === one) { three = randomIndex(array) }\r\n   const newArray = []\r\n   newArray.push(one, two, three)\r\n   return newArray\r\n}\r\n\r\nexport default randomThree;","import React, { Component, Fragment } from 'react';\r\nimport GifDisplay from './GifDisplay';\r\nimport randomThree from './randomizer';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nclass SearchBar extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            errorMessage: '',\r\n            movieSearch: [],\r\n            backupOptions: [],\r\n            movieID: [],\r\n            keywordSearch: [],\r\n            keywordResults: [],\r\n            moviedbAPI: 'b588f737df1d6878d6133a1a7e0bface',\r\n            giphyAPI: 'NShPdQTfWnvbvgxLo7Jd7C5qDeFfrsLR',\r\n            userInput: \"\",\r\n            toggleBackups: false,\r\n            toggleGifDisplay: false,\r\n        }\r\n    }\r\n\r\n\r\n\r\n    getMovie = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            toggleBackups: false,\r\n            toggleGifDisplay: false,\r\n            backupOptions: [],\r\n            keywordSearch: []\r\n        })\r\n        // API CALL 1: movie search based on user's search \r\n        // return the MovieID (also have access to movie details)\r\n        axios({\r\n            url: 'https://api.themoviedb.org/3/search/movie?',\r\n            params: {\r\n                method: `GET`,\r\n                responseType: `json`,\r\n                api_key: this.state.moviedbAPI,\r\n                query: `${this.state.userInput}`,\r\n                // include_adult: 'false',\r\n                page: 1\r\n            }\r\n        })\r\n            .then((res) => {\r\n                console.log(res.data.results);\r\n\r\n                const match = res.data.results.filter((movie) => {\r\n                    return movie.title === this.state.userInput\r\n\r\n                })\r\n\r\n                const backupOptions = res.data.results.filter((movie) => {\r\n                    return movie.popularity > 10\r\n                })\r\n                console.log(match, backupOptions)\r\n                if (match.length === 1) {\r\n                    this.setState({\r\n                        movieSearch: match,\r\n                        toggleGifDisplay: true\r\n                    })\r\n                } else if (match.length === 0 && backupOptions.length === 0) {\r\n                    this.setState({\r\n                        errorMessage: 'That doesn\\'t seem to be a movie. Why don\\'t you try another one?',\r\n                        movieSearch: [],\r\n                        keywordSearch: [],\r\n                        toggleBackups: true\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        errorMessage: 'Sorry, which movie were you looking for?',\r\n                        backupOptions,\r\n                        movieSearch: [],\r\n                        keywordSearch: [],\r\n                        toggleBackups: true\r\n                    })\r\n                }\r\n\r\n                //API call 2, return keywords based on query search from API call 1\r\n                axios({\r\n                    url: `https://api.themoviedb.org/3/movie/${this.state.movieSearch[0].id}/keywords?`,\r\n                    params: {\r\n                        api_key: 'b588f737df1d6878d6133a1a7e0bface',\r\n                    }\r\n                })\r\n                    .then((res) => {\r\n                        const words = res.data.keywords.map((data) => {\r\n                            return data.name\r\n                        })\r\n\r\n                        // Filtering out bad or generic keywords\r\n                        const approvedWords = words.filter((e) => {\r\n                            const badWords = /(based)|(graphic)|(book)|(aftercreditsstinger)|(3d)|(young)|(novel)|(adult)|(comic)|(true story)|(aftercreditsstinger)|(film)|(imax)|(violence)|(film)|(musical)|(director)|(duringcreditsstinger)|(avengers)|(marvel)/g\r\n                            \r\n                            if (badWords.test(e)) {\r\n                                return false\r\n                            } else {\r\n                                return e\r\n                            }\r\n                        })\r\n                        console.log(approvedWords);\r\n\r\n                        const newKeyWords = randomThree(approvedWords);\r\n\r\n                        this.setState({\r\n                            userInput: '',\r\n                            keywordSearch: newKeyWords,\r\n                            keywordResults: words\r\n                        });\r\n                    })\r\n            }).catch(error => {\r\n\r\n            })\r\n    }\r\n\r\n//user enters the name of a movie \r\n    handleUserInput = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            userInput: event.target.value\r\n        })\r\n    }\r\n    //back-up option function\r\n    backupSelection = (event) => {\r\n        const chosenMovie = this.state.backupOptions.filter((backup) => {\r\n            const targetId = parseInt(event.target.id)\r\n            return backup.id === targetId\r\n        })\r\n\r\n        this.setState({\r\n            backupOptions: [],\r\n            toggleBackups: false,\r\n            toggleGifDisplay: true,\r\n            movieId: event.target.id,\r\n            movieSearch: chosenMovie,\r\n            userInput: \"\"\r\n        },\r\n            () => {\r\n                axios({\r\n                    url: `https://api.themoviedb.org/3/movie/${this.state.movieSearch[0].id}/keywords?`,\r\n                    params: {\r\n                        api_key: 'b588f737df1d6878d6133a1a7e0bface',\r\n                    }\r\n                })\r\n                    .then((res) => {\r\n                        console.log(res.data.keywords);\r\n                        const words = res.data.keywords.map((data) => {\r\n                            return data.name\r\n                        })\r\n\r\n                        // Filtering out bad or generic keywords\r\n                        const approvedWords = words.filter((e) => {\r\n                            const badWords = /(based)|(graphic)|(book)|(aftercreditsstinger)|(3d)|(young)|(novel)|(adult)|(comic)|(true story)|(aftercreditsstinger)|(film)|(imax)|(violence)|(film)|(musical)|(director)|(duringcreditsstinger)|(avengers)|(marvel)/g\r\n\r\n                            if (badWords.test(e)) {\r\n                                return false\r\n                            } else {\r\n                                return e\r\n                            }\r\n                        })\r\n                        console.log(approvedWords);\r\n\r\n                        const newKeyWords = randomThree(approvedWords);\r\n\r\n                        this.setState({\r\n                            userInput: '',\r\n                            keywordSearch: newKeyWords,\r\n                            keywordResults: words\r\n                        })\r\n                    })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        // Just a search bar (text input)\r\n        return (\r\n            <Fragment>\r\n                <h3>Type in a movie and get those gifs!</h3>\r\n                <div className=\"wrapper\" >\r\n                    <form onSubmit={this.getMovie}  action=\"\">\r\n                        <label htmlFor=\"\"></label>\r\n                        <input value={this.state.userInput} onChange={this.handleUserInput} type=\"text\"\r\n                            placeholder=\"Type a movie\"\r\n                            id=\"\" required />\r\n                        <button type=\"submit\">Search</button>\r\n                    </form>\r\n                    {\r\n                        //displays the back up movie options to the page\r\n                        this.state.toggleBackups === false\r\n                        ? null\r\n                        : <Fragment>\r\n                            <div className=\"backupOptions\">\r\n                                <h2>{this.state.errorMessage}</h2>\r\n                                {this.state.backupOptions.map((backup) => {\r\n                                    return (\r\n                                        <div key={backup.id} className=\"posterContainer\">\r\n                                            <img onClick={this.backupSelection} src={`https://image.tmdb.org/t/p/w200/${backup.poster_path}`} alt={`Movie poster for ${backup.title}`} id={backup.id} tabIndex=\"0\"/>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        </Fragment>\r\n                    }\r\n    \r\n                    {\r\n                        this.state.toggleGifDisplay === false\r\n                        ? null \r\n                        : <GifDisplay keywordResults={this.state.keywordResults} movieTitle={this.state.movieSearch[0].title} gifWords={this.state.keywordSearch} gifTest='bear'/>\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React, { Component } from 'react';\r\nimport firebase from './firebase'\r\n\r\nclass Highlights extends Component {\r\n\r\n   constructor() {\r\n      super();\r\n      this.state = {\r\n         savedResults: []\r\n      }\r\n   }\r\n\r\n   componentDidMount() {\r\n   //retrieving the saved gifs that user selected from the database\r\n      const dbRef = firebase.database().ref('savedResults');\r\n      dbRef.on('value', (snapshot) => {\r\n         let savedResults = snapshot.val();\r\n         let newState = [];\r\n         for (let key in savedResults) {\r\n            newState.push({\r\n            id: key,\r\n            movieTitle: savedResults[key].movieTitle,\r\n            gif: savedResults[key].gifs\r\n            });\r\n         }\r\n         this.setState({\r\n            savedResults: newState\r\n         });\r\n      });\r\n   }\r\n\r\n   //user is able to remove the saved gif from the database\r\n   removeSubmission = (postRemoval) => {\r\n      const dbRef = firebase.database().ref('savedResults');\r\n      dbRef.child(postRemoval).remove();\r\n   }\r\n\r\n\r\n   render () {\r\n      //displaying the database with all the gifs that the user has saved \r\n      return (\r\n         <div className=\"highlights\">\r\n            { \r\n               this.state.savedResults.map((gifObject) => {\r\n                  return (\r\n                     <div key={gifObject.id} className=\"saved-snapshot\">\r\n                        <h2 >{gifObject.movieTitle}</h2>\r\n                        <div className=\"display-box\">\r\n                           <div className=\"gif-container\">\r\n                              <img src={gifObject.gif[0].images.fixed_width.url} alt={gifObject.gif[0].title} tabindex=\"0\"/>\r\n                           </div>\r\n                           <div className=\"gif-container\">\r\n                              <img src={gifObject.gif[1].images.fixed_width.url} alt={gifObject.gif[1].title} tabindex=\"0\"/>\r\n                           </div>\r\n                           <div className=\"gif-container\">\r\n                              <img src={gifObject.gif[2].images.fixed_width.url} alt={gifObject.gif[2].title} tabindex=\"0\"/>\r\n                           </div>\r\n                        </div>\r\n                        <button onClick={ () => this.removeSubmission(gifObject.id)}>Remove</button>\r\n                     </div>\r\n                  )\r\n               }) \r\n            }\r\n         </div>\r\n      )\r\n   \r\n   }\r\n}\r\nexport default Highlights\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route, \r\n  Link\r\n} from 'react-router-dom';\r\nimport SearchBar from './SearchBar';\r\nimport Highlights from './Highlights.js'\r\nimport './styles/styles.scss'\r\n\r\n\r\n\r\nclass App extends Component {\r\n  // imported SearchBar.js and rendered out the gifs in this return\r\n  //added router to link to others components \r\n  render() {\r\n    return (\r\n      <Router>\r\n        <main>\r\n          <header>\r\n            <div className=\"wrapper\">\r\n              <h1>Out of Context Movie Spoiler</h1>\r\n              <nav>\r\n                <ul>\r\n                  <li>\r\n                    <Link to=\"/Out-of-Context-Movie-Spoiler/\">Home</Link>\r\n                  </li>\r\n                  <li>\r\n                    <Link to=\"/Out-of-Context-Movie-Spoiler/highlights\">Highlights</Link>\r\n                  </li>\r\n                </ul>\r\n              </nav>\r\n            </div>\r\n          </header>\r\n          <section className=\"wrapper\">\r\n            <Route exact path=\"/Out-of-Context-Movie-Spoiler/\" component={ SearchBar } />\r\n            <Route exact path=\"/Out-of-Context-Movie-Spoiler/highlights\" component={ Highlights } />\r\n          </section>\r\n          <footer>\r\n            <p className=\"copyright\">Created by Juno College © 2020</p>\r\n            <p>Powered by Giphy</p>\r\n          </footer>\r\n        </main>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}