{"version":3,"sources":["GifDisplay.js","randomizer.js","SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["GifDisplay","state","gifs","errorMessage","prevProps","this","props","gifWords","getGif","keyword1","keyword2","keyword3","a","Promise","all","apiCall","gif1","gif2","gif3","push","data","setState","console","log","keyword","axios","url","method","dataResponse","params","api_key","s","keywordResults","length","undefined","movieTitle","q","limit","then","result","catch","className","map","items","key","id","src","images","fixed_width","alt","Component","randomIndex","array","Math","floor","random","randomThree","one","two","three","newArray","SearchBar","getMovie","event","preventDefault","toggleBackups","toggleGifDisplay","backupOptions","keywordSearch","responseType","moviedbAPI","query","userInput","include_adult","page","res","match","results","filter","movie","title","popularity","movieSearch","words","keywords","name","approvedWords","e","test","newKeyWords","error","handleUserInput","target","value","backupSelection","chosenMovie","backup","targetId","parseInt","movieId","movieID","giphyAPI","onSubmit","action","htmlFor","onChange","type","placeholder","required","onClick","poster_path","gifTest","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.be042ab8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nclass GifDisplay extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            gifs: [],\r\n            errorMessage: ''\r\n        }\r\n    }\r\n    //prevProp access to previous state in relation to this component\r\n    componentDidUpdate(prevProps) {\r\n        //checking if current gif words are same, then don't run function, only run if userInput\r\n        if (this.props.gifWords === prevProps.gifWords) return;\r\n        \r\n        const getGif = async (keyword1, keyword2, keyword3) => {\r\n            const [gif1, gif2, gif3] = await Promise.all([apiCall(keyword1), apiCall(keyword2), apiCall(keyword3)])\r\n            // console.log('', gif1, gif2, gif3);\r\n            const gifs = []\r\n\r\n            gifs.push(gif1.data.data, gif2.data.data, gif3.data.data)\r\n\r\n            // console.log(gifs)\r\n            this.setState({\r\n                gifs\r\n            })\r\n            \r\n            // console.log(this);\r\n        }\r\n        console.log(this.props.gifWords);\r\n        const apiCall = (keyword) => {\r\n            return axios({\r\n                url: 'https://api.giphy.com/v1/gifs/translate',\r\n                method: 'GET',\r\n                dataResponse: 'json',\r\n                params: {\r\n                    api_key: 'NShPdQTfWnvbvgxLo7Jd7C5qDeFfrsLR',\r\n                    s: keyword\r\n                }\r\n            })\r\n        }\r\n\r\n        if (this.props.keywordResults.length === 1 || this.props.keywordResults.length === 2 || this.props.keywordResults === undefined || this.props.keywordResults.length === 0) {\r\n            console.log('not enough keywords, running with title')\r\n            const newGif = (keyword) => {\r\n                return axios({\r\n                url: 'https://api.giphy.com/v1/gifs/search',\r\n                method: 'GET',\r\n                dataResponse: 'json',\r\n                    params: {\r\n                        api_key: 'NShPdQTfWnvbvgxLo7Jd7C5qDeFfrsLR',\r\n                        q: keyword,\r\n                        limit: 3\r\n                    }\r\n                })\r\n                .then( (result) => {\r\n                    console.log(result);\r\n                    this.setState({\r\n                        gifs: result.data.data\r\n                    })\r\n                })\r\n            }  \r\n            return newGif(this.props.movieTitle)\r\n        } \r\n            else {\r\n                console.log('random keywords running')\r\n                return getGif(...this.props.gifWords).catch(() => {\r\n                this.setState({\r\n                    errorMessage: 'I am so sorry, but no gifs for you right now. I am sick.'\r\n                })\r\n            });\r\n        }\r\n\r\n        \r\n\r\n        // console.log(this.props.gifTest);\r\n\r\n        // API CALL 3: return 3 gifs based of the keywords we get from API 2\r\n        // save gifs and display onto the page\r\n    }\r\n\r\n    render() {\r\n        // display 3 GIFS in horizontal line\r\n        // MAYBE: include keywords that apply to the gift (in a title attribute or label below)\r\n        // include a back button that returns user to search bar \"home page\" \r\n        return (\r\n            <div className=\"wrapper gif-display\">\r\n                <h2>{this.props.movieTitle}</h2>\r\n                <div className=\"gif-box\">\r\n                {this.state.gifs.map(items => {\r\n                    return (\r\n                        <div className=\"gif-container\" key={items.id}>\r\n                            <img src={items?.images?.fixed_width.url} alt=\"\" />\r\n                        </div>\r\n                    )\r\n                })}\r\n                {this.state.errorMessage === '' ? null : <p>{this.state.errorMessage}</p>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default GifDisplay;","const randomIndex = (array) => {\r\n   const index = Math.floor(Math.random() * array.length);\r\n   return array[index]\r\n}\r\n\r\nconst randomThree = (array) => {\r\n   let one = randomIndex(array);\r\n   let two = randomIndex(array);\r\n   let three = randomIndex(array);\r\n   if (one === two || one === three) { one = randomIndex(array) }\r\n   if (two === one || two === three) { two = randomIndex(array) }\r\n   if (three === two || three === one) { three = randomIndex(array) }\r\n   const newArray = []\r\n   newArray.push(one, two, three)\r\n   return newArray\r\n}\r\n\r\nexport default randomThree;","import React, { Component, Fragment } from 'react';\r\nimport GifDisplay from './GifDisplay';\r\nimport randomThree from './randomizer';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n        \r\n//         // randomly pick 3 words and save\r\n//         // wrap calls in async fucnction? use await to get response from API 1 before we call API 2\r\n//         // on successful return of API 2, pass saved keywords to GifDisplay component & trigger view switch\r\n\r\n//         // ERROR CATCH: when user types in empty string, don't submit the call & prompt user to write a word\r\n//         // ERROR CATCH: if user types in a string that is not a direct match, return closest possible match\r\n//             // STRETCH GOAL: instead of closest match, return a list of possible matches and allow the user to pick the one they want\r\n//         // ERROT CATCH: NO NUMBERS! people work the regex magic\r\n\r\n\r\nclass SearchBar extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            errorMessage: '',\r\n            movieSearch: [],\r\n            backupOptions: [],\r\n            movieID: [],\r\n            keywordSearch: [],\r\n            keywordResults: [],\r\n            moviedbAPI: 'b588f737df1d6878d6133a1a7e0bface',\r\n            giphyAPI: 'NShPdQTfWnvbvgxLo7Jd7C5qDeFfrsLR',\r\n            userInput: \"\", \r\n            toggleBackups: false,\r\n            toggleGifDisplay: false\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    getMovie = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            toggleBackups: false,\r\n            toggleGifDisplay: false,\r\n            backupOptions: [],\r\n            keywordSearch: []\r\n        })\r\n        // API CALL 1: movie search based on user's search \r\n        // return the MovieID (also have access to movie details)\r\n        axios({\r\n            url: 'https://api.themoviedb.org/3/search/movie?',\r\n            params: {\r\n                method: `GET`,\r\n                responseType: `json`,\r\n                api_key: this.state.moviedbAPI,\r\n                query: `${this.state.userInput}`,\r\n                include_adult: 'false',\r\n                page: 1\r\n            }\r\n        })\r\n        .then((res) => {\r\n            \r\n            const match = res.data.results.filter((movie) => {\r\n                return movie.title === this.state.userInput\r\n\r\n            }) \r\n\r\n            const backupOptions = res.data.results.filter((movie) => {\r\n                return movie.popularity > 10\r\n            })\r\n            console.log(match, backupOptions)\r\n            if (match.length === 1) {\r\n                this.setState({\r\n                    movieSearch: match,\r\n                    toggleGifDisplay: true\r\n                })\r\n            } else if (match.length === 0 && backupOptions.length === 0) {\r\n                this.setState({\r\n                    errorMessage: 'That doesn\\'t seem to be a movie. Why don\\'t you try another one?',\r\n                    movieSearch: [],\r\n                    keywordSearch: [],\r\n                    toggleBackups: true\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    errorMessage: 'Sorry, which movie were you looking for?',\r\n                    backupOptions,\r\n                    movieSearch: [],\r\n                    keywordSearch: [],\r\n                    toggleBackups: true\r\n                })\r\n            }\r\n            \r\n            //API call 2, return keywords based on query search from API call 1\r\n            axios({\r\n                url: `https://api.themoviedb.org/3/movie/${this.state.movieSearch[0].id}/keywords?`,\r\n                params: {\r\n                    api_key: 'b588f737df1d6878d6133a1a7e0bface',\r\n                }\r\n            })\r\n            .then((res) => {\r\n                const words = res.data.keywords.map((data) => {\r\n                    return data.name\r\n                })\r\n\r\n                // Filtering out bad or generic keywords\r\n                const approvedWords = words.filter((e) => {\r\n                    const badWords = /(based)|(graphic)|(book)|(aftercreditsstinger)|(3d)|(young)|(novel)|(adult)|(comic)|(true story)|(aftercreditsstinger)|(film)|(imax)|(violence)|(film)|(musical)|(director)|(duringcreditsstinger)|(avengers)|(marvel)/g\r\n\r\n                    if (badWords.test(e)) {\r\n                        return false\r\n                    } else {\r\n                        return e\r\n                    }\r\n                })\r\n                const newKeyWords = randomThree(approvedWords);\r\n\r\n                this.setState({\r\n                    userInput: '',\r\n                    keywordSearch: newKeyWords,\r\n                    keywordResults: words\r\n                });\r\n            }) \r\n        }).catch(error => {\r\n            \r\n        })\r\n    }\r\n    \r\n\r\n    handleUserInput = (event) => {\r\n        event.preventDefault();\r\n        this.setState({\r\n            userInput: event.target.value\r\n        })\r\n    }\r\n\r\n    backupSelection = (event) => {\r\n        const chosenMovie = this.state.backupOptions.filter((backup) => {\r\n            const targetId = parseInt(event.target.id)\r\n            return backup.id === targetId\r\n        })\r\n\r\n        this.setState({\r\n            backupOptions: [],\r\n            toggleBackups: false,\r\n            toggleGifDisplay: true,\r\n            movieId: event.target.id,\r\n            movieSearch: chosenMovie,\r\n            userInput: \"\"\r\n        }, \r\n        () => {\r\n            axios({\r\n                url: `https://api.themoviedb.org/3/movie/${this.state.movieSearch[0].id}/keywords?`,\r\n                params: {\r\n                    api_key: 'b588f737df1d6878d6133a1a7e0bface',\r\n                }\r\n            })\r\n            .then((res) => {\r\n                const words = res.data.keywords.map((data) => {\r\n                    return data.name\r\n                })\r\n\r\n                // Filtering out bad or generic keywords\r\n                const approvedWords = words.filter((e) => {\r\n                    const badWords = /(based)|(graphic)|(book)|(aftercreditsstinger)|(3d)|(young)|(novel)|(adult)|(comic)|(true story)|(aftercreditsstinger)|(film)|(imax)|(violence)|(film)|(musical)|(director)|(duringcreditsstinger)|(avengers)|(marvel)/g\r\n\r\n                    if (badWords.test(e)) {\r\n                        return false\r\n                    } else {\r\n                        return e\r\n                    }\r\n                })\r\n                const newKeyWords = randomThree(approvedWords);\r\n\r\n                this.setState({\r\n                    userInput: '',\r\n                    keywordSearch: newKeyWords,\r\n                    keywordResults: words\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        // Just a search bar (text input)\r\n        return (\r\n            \r\n            <div className=\"wrapper\" >\r\n                <form onSubmit={this.getMovie}  action=\"\">\r\n                    <label htmlFor=\"\"></label>\r\n                    <input value={this.state.userInput} onChange={this.handleUserInput} type=\"text\"\r\n                        placeholder=\"Type a movie\"\r\n                        id=\"\" required />\r\n                    <button type=\"submit\">Search</button>\r\n                </form>\r\n                {\r\n                    this.state.toggleBackups === false\r\n                    ? null\r\n                    : <Fragment>\r\n                        <div className=\"backupOptions\">\r\n                            <h2>{this.state.errorMessage}</h2>\r\n                            {this.state.backupOptions.map((backup) => {\r\n                                return (\r\n                                    <div key={backup.id} className=\"posterContainer\">\r\n                                        <img onClick={this.backupSelection} src={`https://image.tmdb.org/t/p/w200/${backup.poster_path}`} alt={`Movie poster for ${backup.title}`} id={backup.id} />\r\n                                    </div>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </Fragment>\r\n                }\r\n\r\n                {\r\n                    this.state.toggleGifDisplay === false\r\n                    ? null \r\n                    : <GifDisplay keywordResults={this.state.keywordResults} movieTitle={this.state.movieSearch[0].title} gifWords={this.state.keywordSearch} gifTest='bear'/>\r\n                }\r\n\r\n            </div>\r\n        \r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\n// import randomizer from './randomizer';\r\nimport SearchBar from './SearchBar';\r\nimport './styles/styles.scss'\r\n\r\n\r\n\r\n// Components\r\n//   - 2 Components\r\n//     - First component search bar / landing page\r\n//     - Second component display giphy\r\n// Error Handling\r\n//   - error state when call comes back false\r\n//     - have to make sure that user inputs something in the search bar\r\n//       - no Numbers!!\r\n// Stretch Goals\r\n//   - save and delete options\r\n//   - accessing my save section and giving user's their own section\r\n//   - allowing user to choose which gif to delete gif and re - randomize(maybe another api call ?)\r\n\r\nclass App extends Component {\r\n  // MVP: Need two views:\r\n    // Homepage: Title, instructions\r\n    // View 1: Search Bar\r\n      // part of the homepage, just a large text input\r\n    // View 2: Giphy Display\r\n      // branches off homepage, instructions are hidden and search bar is small and moved\r\n      // gif display takes front and center\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"test\">\r\n          {/* <header> */}\r\n            <h1>Out of Context Spoiler</h1>\r\n          {/* </header> */}\r\n          <h3>Search a movie and get gifs!</h3>\r\n          <SearchBar />\r\n          <footer>\r\n            <p className=\"copyright\">Created by Juno College © 2020</p>\r\n          </footer>\r\n        </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}